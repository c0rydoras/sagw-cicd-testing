---
name: Versions Changed

on:
  push:
    branches: [main]
    # paths:
    #   - compose.yaml
    #   - ember/package.json
    #   - api/pyproject.toml
    #   - caluma/version.txt

jobs:
  get-versions:
    runs-on: ubuntu-latest
    name: Get Versions

    strategy:
      matrix:
        config:
          - name: api
            version-file: api/pyproject.toml
            command: python -c 'import sys; import tomllib; print(tomllib.loads(sys.stdin.read())["tool"]["poetry"]["version"])'
          - name: ember
            version-file: ember/package.json
            command: jq -r '.version'
          - name: caluma
            version-file: caluma/version.txt
            command: cat
          - name: mysagw
            version-file: compose.yaml
            command: yq '.x-version'
    outputs:
      new: ${{ steps.after.outputs.version }}
      old: ${{ steps.before.outputs.version }}
    steps:
      - name: Calculate Fetch Depth
        id: depth
        env:
          COMMITS: ${{ toJSON(github.event.commits) }}
        run: |
          echo "depth=$(echo $COMMITS | jq '. | length + 1')" >> "$GITHUB_OUTPUT"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ steps.depth.outputs.depth }}

      - name: Install python
        if: contains(matrix.config.version-file, 'toml')
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Get new version
        id: after
        run: |
          echo "version=$(cat ${{ matrix.config.version-file }} | ${{ matrix.config.command }})" >> "$GITHUB_OUTPUT"

      - name: Get previous version
        id: before
        run: |
          echo "version=$(git show ${{ github.event.before }}:${{ matrix.config.version-file }} | ${{ matrix.config.command }})" >> "$GITHUB_OUTPUT"

  create-release:
    runs-on: ubuntu-latest
    needs: get-versions
    if: needs.get-versions.new != needs.get-versions.old
    env:
      TAG_NAME: ${{matrix.config.name == 'mysagw' && needs.get-versions.new || format('{0}-{1}', matrix.config.name, needs.get-versions.new}}
    steps:
      - run: |
          echo "Creating tag && release: $TAG_NAME"
